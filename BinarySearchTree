package maait;

public class BinarySearchTree {
	 private Node root;

	    class Node {
	        public int value;
	        public Node left;
	        public Node right;

	        Node(int value) {
	            this.value = value;
	        }
	    }

		public Node getRoot() {
	        return root;
	    }
}
//	public boolean insert(int value) {
//		Node newNode = new Node(value);
//		if (root == null) {
//			root = newNode;
//			return true;
//		}
//		Node temp = root;
//		while (true) {
//			if (newNode.value == temp.value)
//				return false;
//			if (newNode.value < temp.value) {
//				if (temp.left == null) {
//					temp.left = newNode;
//					return true;
//				}
//				temp = temp.left;
//			} else {
//				if (temp.right == null) {
//					temp.right = newNode;
//					return true;
//				}
//				temp = temp.right;
//			}
//		}
//	}
//}
//	public boolean insert(int value) {
//		Node newNode = new Node(value);
//		if (root == null) {
//			root = newNode;
//			return true;
//		}
//		Node temp = root;
//		while (true) {
//			if (newNode.value == temp.value)
//				return false;
//			if (newNode.value < temp.value) {
//				if (temp.left == null) {
//					temp.left = newNode;
//					return true;

	// }
	// temp = temp.left;
	// }
//			if (temp.right == null) {
//				temp.right = newNode;
//				return true;
//			}
//			temp = temp.right;
//
//		}
	// }

//	public boolean contains(int value) {
//		if (root == null)
//			return false;
//		Node temp = root;
//		while (temp != null) {
//			if (value < temp.value) {
//				temp = temp.left;
//			} else if (value > temp.value) {
//				temp = temp.right;
//			} else {
//				return true;
//			}
//		}
//		return false;
//	}
//}
//public boolean contains(int value)
//{
//	if(root!=null) {
//		Node temp=root;
//		return false;
//		while(temp!=null) {
//			if(value<temp.value) {
//				temp=temp.left;
//			} else if(value>temp.value) {
//				temp=temp.right;
//			} else {
//				return true;
//			}
//			}
//		return false;
//		}
//	}
//public boolean contains(int value) {
//	if (root==null) return false;
//	Node temp=root;
//	while (temp!=null) {
//		if(value<temp.value) {
//			temp=temp.left;
//		} else if(value>temp.value) {
//			temp=temp.right;
//		} else {
//			return true;
//		}
//		
//	}
//	return false;
//	}
//}
//	public boolean insert(int index, int value) {
//		Node newNode = new Node(value);
//		if (root == null);
//		root = newNode;
//		return true;
//	}

//Node temp=root;
//private Object newNode;
//while(true)
//	{
//		if (newNode.value == temp.value)
//			return false;
//		if (newNode.value < temp.value) {
//			if (temp.left == null) {
//				temp.left = newNode;
//
//			}
//			temp = temp.left;
//		} else {
//			if (temp.right == null) {
//				temp.right = newNode;
//			}
//			temp = temp.right;
//		}
//	}
//}
//}
//		public boolean contains(int value) {
//			if(root==null)return false;
//		}
//		Node temp=root;
//		while(temp !=null) {
//		if(value<temp.value) {
//			temp=temp.left;
//		} else {
//			if(value>temp.value) {
//				temp=temp.right;
//			}
//			return true;
//		}
//			}
//}
//}